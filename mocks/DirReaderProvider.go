// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// DirReaderProvider is an autogenerated mock type for the DirReaderProvider type
type DirReaderProvider struct {
	mock.Mock
}

// GetHomeDirPath provides a mock function with given fields:
func (_m *DirReaderProvider) GetHomeDirPath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ReadDir provides a mock function with given fields: dirname
func (_m *DirReaderProvider) ReadDir(dirname string) ([]fs.FileInfo, error) {
	ret := _m.Called(dirname)

	var r0 []fs.FileInfo
	if rf, ok := ret.Get(0).(func(string) []fs.FileInfo); ok {
		r0 = rf(dirname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dirname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFile provides a mock function with given fields: filepath
func (_m *DirReaderProvider) ReadFile(filepath string) ([]byte, error) {
	ret := _m.Called(filepath)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filepath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filepath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
